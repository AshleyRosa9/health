I want to a hierarchy of systems

 - each controller endpoint is a system
   - /api/v2/tickets/create_from_muggle
     - successes per time period
     - "unhandled" errors per time period
       - in Go this is not natural. Pretty much everything is "handled".
       - So the errors are like 'panic' vs validation vs error(wefuckedup) vs junk
       - Determining 'junk' seems hard.
     - validation errors per time period
     - (i wonder if each system just has arbitrary metrics. Eg, invalid_params.title vs invalid_params.body)
     - response time distribution
       - measuring times of subcomponents would be cool. Arbitrary subtimers
     - customer distribution (# customers per day?)
     - I want to set bounds for each system. Eg:
       - min successes/day
       - max unhandled errors per day
       - max validation errors per day
       - max response time, max 99 percentile, etc
 - Each job is also a system
 - Other things can be systems
   - MySQL
     - qps
     - udpates/sec
     - slow queries
     - # cxns
 - we can group peer systems to form groups in a belongs_to manner
   - eg, /api/v2/tickets/create_from_muggle belongs to {/api/v2, tickets}
   - this is kind of just categorization. it allows a dashboard of a bunch of shit
 - each system can depend on other systems
   - eg, /api/v2/tickets/create_from_muggle depends on {mysql, redis, and jobs/ticket_counts}
   - if a system calls into another system, it depends on that system.
 - Consider memcached
   - There's a couple systems involved in this
     - metroid/memcached is memcached from metroid's perspective. Categorized by 'memcached'
     - web33/memcached is the local instance of memcached on web33. Categorized by 'memcached/hosts'
     - web32/memcached is the local instance of memcached on web32. Categorized by 'memcached/hosts'
 - Hierarchical
   - Categorizing something as "admin/tickets" also categorizates by admin
 - a system named web33/memcached will auto categorize to web33
 - TODO: what happens if a system and a category overlap?
   - eg, system: "api/v2/tickets/create" defines category: "api/v2/tickets"
   - what if we have a system "api/v2/tickets" as well?


---------

 - Jobs: list them, sort by {count, success %, total time, avg/median response time})
   - Diplay:
     - count/breakdown of succes vs validation vs panic vs internal_error vs junk -- over time
     - Total time over time
     - min/max/avg, percentiles time over time
   - show a list of events, errors, and timers that happen on this job -> click into them.
 - Given an event:
   - count over time
   - If there are kvs, a sampling of some random ones
 - Given an error event:
   - count over time, broken out by error
   - for each error, it's string.
   - If there are kvs, a sampling of some random ones
 - Given a timing
   - {count, min, max, distribution} over time


GET /health/jobs/:job
{
    name: "/api/v2/tickets/:id",
    start: 1402282820,
    end: 1402282830,
    
    totals: {
        success: 0,
        validation: 0,
        panic: 0,
        internal_error: 0,
        junk: 0,
    },
    
    
}


GET /health/data
{
    sets: [{
        start: 1402282820,
        end: 1402282830,
        jobs: 23,
        metrics: 173
    }]
}

GET /health/data/1402282825  <- Epoch seconds
{
    start: 1402282820,
    end: 1402282830,
    jobs: [{...}, ...],
    
}


















